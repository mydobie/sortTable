{"version":3,"sources":["Components/Page.tsx","Components/Pagination.tsx"],"names":["PaginationButton","props","ariaLabel","active","disabled","pageNumber","onClick","isPrevious","isNext","className","undefined","type","Pagination","initialActivePage","numberOfPages","onPageChange","id","React","useState","activePage","setActivePage","useEffect","href","Page","options","i","push","value","style","width","onChange","event","parseInt","target","setSelect","pages","setPages"],"mappings":"+LAiDeA,EAvCU,SAACC,GACxB,IAEIC,EAFIC,EAA8DF,EAA9DE,OAAQC,EAAsDH,EAAtDG,SAAUC,EAA4CJ,EAA5CI,WAAYC,EAAgCL,EAAhCK,QAASC,EAAuBN,EAAvBM,WAAYC,EAAWP,EAAXO,OAQ3D,OALIA,EACFN,EAAY,YACHK,IACTL,EAAY,iBAGZ,oBACEO,UAAS,oBAAeL,EAAW,WAAa,GAAvC,YACPD,EAAS,SAAW,IAEtB,kCAAiCI,EACjC,8BAA6BC,EAC7B,0BAAyBA,IAAWD,QAAoBG,EAN1D,SAQE,yBACEC,KAAK,SACLF,UAAS,oBAAeN,EAAS,SAAW,IAC5C,eAAcA,EAAS,YAASO,EAChCJ,QAASA,EAAU,kBAAMA,EAAQD,IAAc,aAC/CD,SAAUA,EACV,aAAYF,EANd,UAQGK,EAAa,sBAAM,cAAY,OAAlB,kBAA0C,KACvDC,EAAS,sBAAM,cAAY,OAAlB,kBAA0C,KAClDD,GAAeC,EAKb,KAJF,qCACE,sBAAMC,UAAU,0BAAhB,mBACCJ,W,MCsEEO,UAnGI,SAACX,GAClB,IAAQY,EAAuDZ,EAAvDY,kBAAmBC,EAAoCb,EAApCa,cAAeC,EAAqBd,EAArBc,aAAcC,EAAOf,EAAPe,GACxD,EAAoCC,IAAMC,SAASL,GAAnD,mBAAOM,EAAP,KAAmBC,EAAnB,KAcA,GAVAH,IAAMI,WAAU,WACdN,EAAaI,KACZ,CAACA,EAAYJ,IAEhBE,IAAMI,WAAU,WACdD,EAAc,GACdL,EAAa,KAEZ,CAACD,IAEkB,IAAlBA,EACF,OAAO,KA6CT,OACE,gCACE,qBAAKL,UAAU,sBAAsB,kCAArC,SACE,mBAAGa,KAAI,WAAMN,EAAN,iBAAyB,+BAAhC,+BAIF,qBAAK,aAAW,mBAAhB,SACE,qBACEP,UAAU,+CACV,qBAFF,UAIE,cAACc,EAAD,CACEpB,OAAuB,IAAfgB,EACRf,SAAUe,GAAc,EACxBb,QAAS,WACPc,EAAcD,EAAa,IAE7BZ,YAAU,IAEXO,EA9EgB,GAiCP,WAEhB,IADA,IAAMU,EAAU,GACPC,EAAI,EAAGA,GAAKX,EAAeW,GAAK,EACvCD,EAAQE,KACN,wBAAQC,MAAOF,EAAf,SACGA,GADoBA,IAK3B,OACE,6BACE,wBACEhB,UAAU,4DACVmB,MAAO,CAAEC,MAAO,OAChBC,SAAU,SAACC,GAAD,OAAWX,EAAcY,SAASD,EAAME,OAAON,MAAO,MAChEA,MAAOR,EACP,aAAW,mBACX,4BANF,SAQGK,MA0BmCU,GA9D3B,WAEf,IADA,IAAMC,EAAQ,GADO,WAEZV,GACPU,EAAMT,KACJ,cAACH,EAAD,CACElB,WAAYoB,EAEZtB,OAAQgB,IAAeM,EACvBnB,QAAS,WACPc,EAAcK,KAHXA,KAJFA,EAAI,EAAGA,GAAKX,EAAeW,GAAK,EAAI,EAApCA,GAYT,OAAOU,EAgDiDC,GAElD,cAACb,EAAD,CACEpB,OAAQgB,IAAeL,EAAgB,EACvCV,SAAUe,GAAcL,EACxBR,QAAS,WACPc,EAAcD,EAAa,IAE7BX,QAAM,SAIZ,qBAAKQ,GAAE,UAAKA,EAAL","file":"static/js/4.65d2c41d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  onClick?: (pageNumber: number | undefined) => void;\n  active: boolean;\n  pageNumber?: number;\n  disabled?: boolean;\n  isPrevious?: boolean;\n  isNext?: boolean;\n}\nconst PaginationButton = (props: Props) => {\n  const { active, disabled, pageNumber, onClick, isPrevious, isNext } = props;\n\n  let ariaLabel;\n  if (isNext) {\n    ariaLabel = 'Next page';\n  } else if (isPrevious) {\n    ariaLabel = 'Previous page';\n  }\n  return (\n    <li\n      className={`page-item ${disabled ? 'disabled' : ''} ${\n        active ? 'active' : ''\n      }`}\n      data-pagination-previous-button={isPrevious}\n      data-pagination-next-button={isNext}\n      data-pagination-button={!isNext && !isPrevious ? true : undefined}\n    >\n      <button\n        type='button'\n        className={`page-link ${active ? 'active' : ''}`}\n        aria-current={active ? 'page' : undefined}\n        onClick={onClick ? () => onClick(pageNumber) : () => {}}\n        disabled={disabled}\n        aria-label={ariaLabel}\n      >\n        {isPrevious ? <span aria-hidden='true'>&laquo;</span> : null}\n        {isNext ? <span aria-hidden='true'>&raquo;</span> : null}\n        {!isPrevious && !isNext ? (\n          <>\n            <span className='sr-only visually-hidden'>page </span>\n            {pageNumber}\n          </>\n        ) : null}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable no-console */\nimport React from 'react';\nimport Page from './Page';\nimport './pagination.css';\n\ninterface Props {\n  numberOfPages: number;\n  initialActivePage: number;\n  onPageChange: (newPageNumber: number) => void;\n  id: string;\n}\n\nconst Pagination = (props: Props) => {\n  const { initialActivePage, numberOfPages, onPageChange, id } = props;\n  const [activePage, setActivePage] = React.useState(initialActivePage);\n\n  const maxNumberOfPages = 10;\n\n  React.useEffect(() => {\n    onPageChange(activePage);\n  }, [activePage, onPageChange]);\n\n  React.useEffect(() => {\n    setActivePage(1);\n    onPageChange(1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [numberOfPages]);\n\n  if (numberOfPages === 1) {\n    return null;\n  }\n\n  const setPages = () => {\n    const pages = [];\n    for (let i = 1; i <= numberOfPages; i += 1) {\n      pages.push(\n        <Page\n          pageNumber={i}\n          key={i}\n          active={activePage === i}\n          onClick={() => {\n            setActivePage(i);\n          }}\n        />\n      );\n    }\n    return pages;\n  };\n\n  const setSelect = () => {\n    const options = [];\n    for (let i = 1; i <= numberOfPages; i += 1) {\n      options.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n    return (\n      <li>\n        <select\n          className='form-select form-select-sm custom-select custom-select-sm'\n          style={{ width: '6em' }}\n          onChange={(event) => setActivePage(parseInt(event.target.value, 10))}\n          value={activePage}\n          aria-label='Show page number'\n          data-pagination-select\n        >\n          {options}\n        </select>\n      </li>\n    );\n  };\n\n  return (\n    <div>\n      <div className='text-right text-end' data-skip-pagination-wrapper>\n        <a href={`#${id}EndPagination`} data-skip-pagination-link>\n          Skip pagination\n        </a>\n      </div>\n      <nav aria-label='Table pagination'>\n        <ul\n          className='pagination pagination-sm justify-content-end'\n          data-pagination\n        >\n          <Page\n            active={activePage === 0}\n            disabled={activePage <= 1}\n            onClick={() => {\n              setActivePage(activePage - 1);\n            }}\n            isPrevious\n          />\n          {numberOfPages > maxNumberOfPages ? setSelect() : setPages()}\n\n          <Page\n            active={activePage === numberOfPages + 1}\n            disabled={activePage >= numberOfPages}\n            onClick={() => {\n              setActivePage(activePage + 1);\n            }}\n            isNext\n          />\n        </ul>\n      </nav>\n      <div id={`${id}EndPagination`} />\n    </div>\n  );\n};\n\nexport default Pagination;\n"],"sourceRoot":""}